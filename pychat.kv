# Arquivo KvLang contendo os widgets e suas propriedades


# importação
#:import C kivy.utils.get_color_from_hex

# Classe Inicial com os widgets e suas propriedades
<Inicial>:
    name:'inicial'
    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'src/bg.jpg'
        ActionBar:
            pos_hint:{'top':1}
            background_image: 'src/white-bg.png'
            background_color:C("#000000")
            ActionView:
                ActionPrevious:
                    title: 'PYCHAT'
                    font_name:'src/Roboto-Light.ttf'
                    with_previous: False
        Label:
            text:'Pychat'
            font_name:'src/coolveticarg.ttf'
            pos_hint:{'center_x':.5, 'center_y':.7}
            font_size:sp(72)
            color:C('#000000')

        TextInput:
            id:nickname
            hint_text:'Nickname:'
            font_name:'src/Roboto-Light.ttf'
            font_size:sp(24)
            pos_hint:{'center_x':.5, 'center_y':.45}
            size_hint:(.4, .1)
            halign:"center"
            multiline:False

            # Método que valida o Texto do Widget TextInput
            on_text_validate: 
                # Envia o texto do TextInput para o servidor
                root.send(nickname.text)
                # Direciona o app para a tela Chat
                root.manager.current='chat'

            # Método que captura qualquer texto introduzido no TextInput
            on_text:
                # Envia o texto do TextInput para validar o Botão de Enviar
                root.verificanick(nickname.text)

        Button:
            id:bt
            text:"Entrar"
            font_name:'src/Roboto-Light.ttf'
            size_hint:.3, .09
            bold:True
            pos_hint:{'center_x':.5, 'center_y':.25}
            font_size:sp(24)
            background_color: C('#003399')
            disabled: True

            # Método da ação de pressionar o botão
            on_press:
                # Envia o texto do TextInput para o servidor
                root.send(nickname.text)
                # Direciona o app para a tela Chat
                root.manager.current='chat'

            

        

# Classe Chat com os widgets e suas propriedades
<Chat>:
    name:'chat'
    msgbox:box

    FloatLayout:
        canvas.before:
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'src/bg.jpg'
        ActionBar:
            pos_hint:{'top':1}
            background_image: 'src/white-bg.png'
            background_color:C("#000000")
            ActionView:
                ActionPrevious:
                    title: 'PYCHAT'
                    font_name:'src/Roboto-Light.ttf'
                    with_previous: False

        ScrollView:
            size_hint:.9, .7
            pos_hint:{'center_x':.5, 'center_y':.5}
            canvas.before:
                Color:
                    rgba: .5, .5, .5, .5
                Rectangle:
                    pos: self.pos
                    size: self.size
            GridLayout:
                id:box
                size_hint_y: None
                cols:1
                row_default_height: '20dp'
                row_force_default: True
                height: self.minimum_height
                spacing: 10

        Spinner:
            id: spinner_type
            background_color: C("#669999")
            text:'TIPO'
            font_name:'src/Roboto-Light.ttf'
            values: ('MSG', 'PRIVATE', 'NICK', 'EXIT')
            size_hint:.1, .1
            pos_hint:{'center_x':.1, 'center_y':.1}

            # Método que verifica a propriedade text do Widget
            on_text: 
                # Valida o texto
                root.spinner(spinner_type, spinner_type.text)
                
        TextInput:
			id:msg
            font_size:18
            text:'MSG: '
            font_name:'src/Roboto-Light.ttf'
            size_hint:.6, .1
            pos_hint:{'center_x':.45, 'center_y':.1}
            hint_text:'Digite sua mensagem aqui'
            multiline:False

            # Método que valida o Texto do Widget TextInput
            on_text_validate: 
                # Envia o texto do TextInput para o servidor
                root.send_msg(msg.text)
                # reseta o text
                msg.text='MSG: '
                # reseta o text do Widget Spinner
                spinner_type.text='TIPO'

            # Método que captura qualquer texto introduzido no TextInput
            on_text: 
                # Envia o texto do TextInput para validar o Botão de Enviar
                root.verifica_msg(msg.text)

        Button:
            id:enviar
            background_color: C('#003399')
            size_hint:.2, .1
            text:'Enviar'
            font_name:'src/Roboto-Light.ttf'
            pos_hint:{'center_x':.85, 'center_y':.1}
            disabled: True
            
            # Método da ação de pressionar o botão
			on_press:
                # Envia o texto do TextInput para o servidor
				root.send_msg(msg.text)
                # reseta o text
                msg.text='MSG: '
                # reseta o text do Widget Spinner
                spinner_type.text='TIPO'
                # reseta o estado para desativado
                self.disabled=True
            
                